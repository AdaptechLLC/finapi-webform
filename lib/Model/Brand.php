<?php
/**
 * Brand
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPIWebForm\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * finAPI Web Form 2.0
 *
 * The following pages give you some general information on how to use our APIs.<br/>The actual API services documentation then follows further below. You can use the menu to jump between API sections.<br/><br/>This page has a built-in HTTP(S) client, so you can test the services directly from within this page, by filling in the request parameters and/or body in the respective services, and then hitting the TRY button. Note that you need to be authorized to make a successful API call. To authorize, refer to the '<a target='_blank' href='https://docs.finapi.io/?product=access#tag--Authorization'>Authorization</a>' section of Access, or in case you already have a valid user token, just use the QUICK AUTH on the left.<br/>Please also remember that all user management functions should be looked up in <a target='_blank' href='https://docs.finapi.io/?product=access'>Access</a>.<br/><br/>You should also check out the <a target='_blank' href='https://documentation.finapi.io/webform/'>Web Form 2.0 Public Documentation</a> as well as <a target='_blank' href='https://documentation.finapi.io/access/'>Access Public Documentation</a> for more information. If you need any help with the API, contact <a href='mailto:support@finapi.io'>support@finapi.io</a>.
 *
 * The version of the OpenAPI document: 2.277.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPIWebForm\Client\Model;

use \ArrayAccess;
use \OpenAPIWebForm\Client\ObjectSerializer;

/**
 * Brand Class Doc Comment
 *
 * @category Class
 * @description Customization related to branding
 * @package  OpenAPIWebForm\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Brand implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Brand';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'logo' => 'string',
        'favicon' => 'string',
        'intro_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'logo' => null,
        'favicon' => null,
        'intro_text' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'logo' => 'logo',
        'favicon' => 'favicon',
        'intro_text' => 'introText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'logo' => 'setLogo',
        'favicon' => 'setFavicon',
        'intro_text' => 'setIntroText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'logo' => 'getLogo',
        'favicon' => 'getFavicon',
        'intro_text' => 'getIntroText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['logo'] = $data['logo'] ?? null;
        $this->container['favicon'] = $data['favicon'] ?? null;
        $this->container['intro_text'] = $data['intro_text'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['logo']) && (mb_strlen($this->container['logo']) > 50000)) {
            $invalidProperties[] = "invalid value for 'logo', the character length must be smaller than or equal to 50000.";
        }

        if (!is_null($this->container['logo']) && (mb_strlen($this->container['logo']) < 0)) {
            $invalidProperties[] = "invalid value for 'logo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['logo']) && !preg_match("/data:image\/(png|jpg|jpeg|gif|svg\\+xml);base64,(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?/", $this->container['logo'])) {
            $invalidProperties[] = "invalid value for 'logo', must be conform to the pattern /data:image\/(png|jpg|jpeg|gif|svg\\+xml);base64,(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?/.";
        }

        if (!is_null($this->container['favicon']) && (mb_strlen($this->container['favicon']) > 50000)) {
            $invalidProperties[] = "invalid value for 'favicon', the character length must be smaller than or equal to 50000.";
        }

        if (!is_null($this->container['favicon']) && (mb_strlen($this->container['favicon']) < 0)) {
            $invalidProperties[] = "invalid value for 'favicon', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['favicon']) && !preg_match("/data:image\/(x-icon|png|jpg|jpeg|gif|svg\\+xml);base64,(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?/", $this->container['favicon'])) {
            $invalidProperties[] = "invalid value for 'favicon', must be conform to the pattern /data:image\/(x-icon|png|jpg|jpeg|gif|svg\\+xml);base64,(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?/.";
        }

        if (!is_null($this->container['intro_text']) && (mb_strlen($this->container['intro_text']) > 1000)) {
            $invalidProperties[] = "invalid value for 'intro_text', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['intro_text']) && (mb_strlen($this->container['intro_text']) < 0)) {
            $invalidProperties[] = "invalid value for 'intro_text', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo Logo of minimum height 40px that will be shown in the web form header.Bigger images are also accepted, but will be scaled down.<br/>The image must follow the DATA URI scheme: <code>data:[\\<media type\\>][;base64],\\<data\\></code>
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (!is_null($logo) && (mb_strlen($logo) > 50000)) {
            throw new \InvalidArgumentException('invalid length for $logo when calling Brand., must be smaller than or equal to 50000.');
        }
        if (!is_null($logo) && (mb_strlen($logo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $logo when calling Brand., must be bigger than or equal to 0.');
        }
        if (!is_null($logo) && (!preg_match("/data:image\/(png|jpg|jpeg|gif|svg\\+xml);base64,(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?/", $logo))) {
            throw new \InvalidArgumentException("invalid value for $logo when calling Brand., must conform to the pattern /data:image\/(png|jpg|jpeg|gif|svg\\+xml);base64,(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?/.");
        }

        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets favicon
     *
     * @return string|null
     */
    public function getFavicon()
    {
        return $this->container['favicon'];
    }

    /**
     * Sets favicon
     *
     * @param string|null $favicon Logo of minimum size 32x32px that will be shown in the browser tab favicon.<br/>The image must follow the DATA URI scheme: <code>data:[\\<media type\\>][;base64],\\<data\\></code>
     *
     * @return self
     */
    public function setFavicon($favicon)
    {
        if (!is_null($favicon) && (mb_strlen($favicon) > 50000)) {
            throw new \InvalidArgumentException('invalid length for $favicon when calling Brand., must be smaller than or equal to 50000.');
        }
        if (!is_null($favicon) && (mb_strlen($favicon) < 0)) {
            throw new \InvalidArgumentException('invalid length for $favicon when calling Brand., must be bigger than or equal to 0.');
        }
        if (!is_null($favicon) && (!preg_match("/data:image\/(x-icon|png|jpg|jpeg|gif|svg\\+xml);base64,(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?/", $favicon))) {
            throw new \InvalidArgumentException("invalid value for $favicon when calling Brand., must conform to the pattern /data:image\/(x-icon|png|jpg|jpeg|gif|svg\\+xml);base64,(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?/.");
        }

        $this->container['favicon'] = $favicon;

        return $this;
    }

    /**
     * Gets intro_text
     *
     * @return string|null
     */
    public function getIntroText()
    {
        return $this->container['intro_text'];
    }

    /**
     * Sets intro_text
     *
     * @param string|null $intro_text An introduction text that will be shown on the first web form view for bank selection.
     *
     * @return self
     */
    public function setIntroText($intro_text)
    {
        if (!is_null($intro_text) && (mb_strlen($intro_text) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $intro_text when calling Brand., must be smaller than or equal to 1000.');
        }
        if (!is_null($intro_text) && (mb_strlen($intro_text) < 0)) {
            throw new \InvalidArgumentException('invalid length for $intro_text when calling Brand., must be bigger than or equal to 0.');
        }

        $this->container['intro_text'] = $intro_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


